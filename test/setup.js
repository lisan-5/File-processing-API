const path = require('path');
const fs = require('fs-extra');

// Test configuration
const TEST_CONFIG = {
  UPLOADS_DIR: path.join(__dirname, '../test-uploads'),
  DATA_DIR: path.join(__dirname, '../test-data'),
  FIXTURES_DIR: path.join(__dirname, 'fixtures'),
  TIMEOUT: 10000
};

// Test utilities
const TestUtils = {
  // Create test directories
  async setupTestEnvironment() {
    await fs.ensureDir(TEST_CONFIG.UPLOADS_DIR);
    await fs.ensureDir(TEST_CONFIG.DATA_DIR);
    await fs.ensureDir(TEST_CONFIG.FIXTURES_DIR);
  },

  // Clean up test environment
  async cleanupTestEnvironment() {
    await fs.remove(TEST_CONFIG.UPLOADS_DIR);
    await fs.remove(TEST_CONFIG.DATA_DIR);
  },

  // Create test files
  async createTestFiles() {
    const testFiles = {
      image: {
        path: path.join(TEST_CONFIG.FIXTURES_DIR, 'test-image.jpg'),
        mimetype: 'image/jpeg',
        originalname: 'test-image.jpg',
        size: 1024
      },
      document: {
        path: path.join(TEST_CONFIG.FIXTURES_DIR, 'test-document.pdf'),
        mimetype: 'application/pdf',
        originalname: 'test-document.pdf',
        size: 2048
      },
      text: {
        path: path.join(TEST_CONFIG.FIXTURES_DIR, 'test-text.txt'),
        mimetype: 'text/plain',
        originalname: 'test-text.txt',
        size: 512
      }
    };

    // Create test image (1x1 pixel JPEG)
    const testImageBuffer = Buffer.from([
      0xFF, 0xD8, 0xFF, 0xE0, 0x00, 0x10, 0x4A, 0x46, 0x49, 0x46, 0x00, 0x01,
      0x01, 0x01, 0x00, 0x48, 0x00, 0x48, 0x00, 0x00, 0xFF, 0xDB, 0x00, 0x43,
      0x00, 0x08, 0x06, 0x06, 0x07, 0x06, 0x05, 0x08, 0x07, 0x07, 0x07, 0x09,
      0x09, 0x08, 0x0A, 0x0C, 0x14, 0x0D, 0x0C, 0x0B, 0x0B, 0x0C, 0x19, 0x12,
      0x13, 0x0F, 0x14, 0x1D, 0x1A, 0x1F, 0x1E, 0x1D, 0x1A, 0x1C, 0x1C, 0x20,
      0x24, 0x2E, 0x27, 0x20, 0x22, 0x2C, 0x23, 0x1C, 0x1C, 0x28, 0x37, 0x29,
      0x2C, 0x30, 0x31, 0x34, 0x34, 0x34, 0x1F, 0x27, 0x39, 0x3D, 0x38, 0x32,
      0x3C, 0x2E, 0x33, 0x34, 0x32, 0xFF, 0xC0, 0x00, 0x11, 0x08, 0x00, 0x01,
      0x00, 0x01, 0x01, 0x01, 0x11, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11, 0x01,
      0xFF, 0xC4, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xFF, 0xC4,
      0x00, 0x14, 0x10, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xDA, 0x00, 0x0C,
      0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 0x11, 0x00, 0x3F, 0x00, 0x8A, 0x20,
      0x00, 0xFF, 0xD9
    ]);

    // Create test PDF
    const testPdfBuffer = Buffer.from([
      0x25, 0x50, 0x44, 0x46, 0x2D, 0x31, 0x2E, 0x34, 0x0A, 0x25, 0xC7, 0xEC,
      0x8F, 0xA2, 0x0A, 0x31, 0x20, 0x30, 0x20, 0x6F, 0x62, 0x6A, 0x0A, 0x3C,
      0x3C, 0x2F, 0x54, 0x79, 0x70, 0x65, 0x2F, 0x43, 0x61, 0x74, 0x61, 0x6C,
      0x6F, 0x67, 0x2F, 0x50, 0x61, 0x67, 0x65, 0x73, 0x20, 0x32, 0x20, 0x30,
      0x20, 0x52, 0x3E, 0x3E, 0x0A, 0x65, 0x6E, 0x64, 0x6F, 0x62, 0x6A, 0x0A,
      0x32, 0x20, 0x30, 0x20, 0x6F, 0x62, 0x6A, 0x0A, 0x3C, 0x3C, 0x2F, 0x54,
      0x79, 0x70, 0x65, 0x2F, 0x50, 0x61, 0x67, 0x65, 0x2F, 0x50, 0x61, 0x72,
      0x65, 0x6E, 0x74, 0x20, 0x33, 0x20, 0x30, 0x20, 0x52, 0x2F, 0x4D, 0x65,
      0x64, 0x69, 0x61, 0x42, 0x6F, 0x78, 0x5B, 0x30, 0x20, 0x30, 0x20, 0x36,
      0x31, 0x32, 0x20, 0x37, 0x39, 0x32, 0x5D, 0x2F, 0x43, 0x6F, 0x6E, 0x74,
      0x65, 0x6E, 0x74, 0x73, 0x20, 0x34, 0x20, 0x30, 0x20, 0x52, 0x2F, 0x52,
      0x65, 0x73, 0x6F, 0x75, 0x72, 0x63, 0x65, 0x73, 0x3E, 0x3E, 0x0A, 0x65,
      0x6E, 0x64, 0x6F, 0x62, 0x6A, 0x0A, 0x33, 0x20, 0x30, 0x20, 0x6F, 0x62,
      0x6A, 0x0A, 0x3C, 0x3C, 0x2F, 0x54, 0x79, 0x70, 0x65, 0x2F, 0x50, 0x61,
      0x67, 0x65, 0x73, 0x2F, 0x50, 0x61, 0x67, 0x65, 0x73, 0x20, 0x32, 0x20,
      0x30, 0x20, 0x52, 0x2F, 0x43, 0x6F, 0x75, 0x6E, 0x74, 0x20, 0x31, 0x2F,
      0x4B, 0x69, 0x64, 0x73, 0x5B, 0x32, 0x20, 0x30, 0x20, 0x52, 0x5D, 0x3E,
      0x3E, 0x0A, 0x65, 0x6E, 0x64, 0x6F, 0x62, 0x6A, 0x0A, 0x34, 0x20, 0x30,
      0x20, 0x6F, 0x62, 0x6A, 0x0A, 0x3C, 0x3C, 0x2F, 0x4C, 0x65, 0x6E, 0x67,
      0x74, 0x68, 0x20, 0x35, 0x20, 0x30, 0x20, 0x52, 0x3E, 0x3E, 0x0A, 0x73,
      0x74, 0x72, 0x65, 0x61, 0x6D, 0x0A, 0x42, 0x54, 0x0A, 0x35, 0x30, 0x20,
      0x35, 0x30, 0x20, 0x54, 0x44, 0x0A, 0x2F, 0x46, 0x31, 0x20, 0x31, 0x32,
      0x20, 0x54, 0x66, 0x0A, 0x28, 0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x20, 0x57,
      0x6F, 0x72, 0x6C, 0x64, 0x29, 0x20, 0x54, 0x6A, 0x0A, 0x45, 0x54, 0x0A,
      0x65, 0x6E, 0x64, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x0A, 0x65, 0x6E,
      0x64, 0x6F, 0x62, 0x6A, 0x0A, 0x35, 0x20, 0x30, 0x20, 0x6F, 0x62, 0x6A,
      0x0A, 0x3C, 0x3C, 0x2F, 0x54, 0x79, 0x70, 0x65, 0x2F, 0x46, 0x6F, 0x6E,
      0x74, 0x2F, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x2F, 0x54, 0x79,
      0x70, 0x65, 0x31, 0x2F, 0x42, 0x61, 0x73, 0x65, 0x46, 0x6F, 0x6E, 0x74,
      0x2F, 0x46, 0x6F, 0x6E, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
      0x74, 0x6F, 0x72, 0x2F, 0x46, 0x6F, 0x6E, 0x74, 0x42, 0x61, 0x73, 0x65,
      0x2F, 0x48, 0x65, 0x6C, 0x76, 0x65, 0x74, 0x69, 0x63, 0x61, 0x3E, 0x3E,
      0x0A, 0x65, 0x6E, 0x64, 0x6F, 0x62, 0x6A, 0x0A, 0x78, 0x72, 0x65, 0x66,
      0x0A, 0x30, 0x20, 0x36, 0x0A, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
      0x30, 0x30, 0x30, 0x20, 0x36, 0x35, 0x35, 0x33, 0x35, 0x20, 0x66, 0x0A,
      0x0A, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20,
      0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x6E, 0x0A
    ]);

    // Create test text file
    const testTextBuffer = Buffer.from('Hello World! This is a test text file.');

    // Write test files
    await fs.writeFile(testFiles.image.path, testImageBuffer);
    await fs.writeFile(testFiles.document.path, testPdfBuffer);
    await fs.writeFile(testFiles.text.path, testTextBuffer);

    return testFiles;
  },

  // Generate test data
  generateTestData() {
    return {
      fileId: `test-file-id-${Date.now()}`,
      description: 'Test file description',
      tags: ['test', 'sample'],
      category: 'images',
      metadata: {
        width: 100,
        height: 100,
        format: 'jpeg'
      }
    };
  },

  // Mock request object
  mockRequest(data = {}) {
    return {
      body: data.body || {},
      query: data.query || {},
      params: data.params || {},
      files: data.files || [],
      headers: data.headers || {},
      method: data.method || 'GET',
      url: data.url || '/test',
      ip: data.ip || '127.0.0.1',
      get: (header) => data.headers?.[header] || null
    };
  },

  // Mock response object
  mockResponse() {
    const res = {};
    res.status = jest.fn().mockReturnValue(res);
    res.json = jest.fn().mockReturnValue(res);
    res.send = jest.fn().mockReturnValue(res);
    res.setHeader = jest.fn().mockReturnValue(res);
    return res;
  },

  // Mock next function
  mockNext() {
    return jest.fn();
  }
};

module.exports = {
  TEST_CONFIG,
  TestUtils
};
